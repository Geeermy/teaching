# -*- coding: utf-8 -*-
"""Clase 2 - Actividad.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vP3bHoqxaMIqcqsSO5_4fZtG7trsL4CI

# Diplomado en Big Data - Introducción a las Herramientas de la Nube

### **Profesor:** Germán Leandro Contreras Sagredo
### **Ayudantes**
### Jorge Becerra de la Torre
### Valentina Rojas Mercier

## Actividad de la Clase 2: Asignación de roles y manejo de recursos en S3

La empresa chilena *YesIndustry* ha logrado un alto estatus a nivel mundial, sobre todo el último tiempo, al ser pionera en el desarrollo de tecnología para la innovación de la industria alimentaria. Es más, ha sido recientemente nombrada una compañía *unicornio* al ser valorada en más de un millón de dólares gracias a sus últimas rondas de financiamiento.

En esta empresa, existen las siguientes áreas:

**1. Ingeniería de Software:** Área dedicada al desarrollo de las tecnologías utilizadas por la empresa.

**2. Ciencia de los alimentos:** Área encargada del estudio de recetas de los alimentos ofrecidos.

**3. Comercial:** Área encargada de la venta y distribución de productos alimenticios en los distintos mercados del país, así como también del financiamiento de los empleados de la empresa.

**4. Operaciones:** Área encargada de la gestión de recursos físicos de la empresa, como proveedores de insumos y alimentos.

*YesIndustry* ha escalado rápidamente en los últimos años dado su gran éxito, por lo que han decidido utilizar los servicios de Amazon Web Services para realizar sus actividades. Particularmente, almacenan grandes volúmenes de datos en S3 y, para cada área, existen recursos específicos a los que puede acceder cada una de ellas.

En esta actividad, deberás crear roles IAM dependiendo de las actividades que lleva a cabo cada una de las áreas mencionadas y, posteriormente, asignarle las políticas pertinentes para realizarlas. Al final de este *notebook* encontrarás una celda a ejecutar que tendrá el *output* esperado donde, rellenando con el nombre de cada rol que creaste, podrás *testear* si cada uno de ellos es efectivamente capaz de acceder a los recursos que le corresponde (y por supuesto, se le es denegado descargar aquellos en los cuales no debería tener permisos).

A continuación te entregamos algunas funciones para facilitar tu trabajo.
"""

# Primero, instalamos las librerías necesarias
!pip install boto3
import json
import boto3

# Instanciamos el cliente de boto3
iam = boto3.client('iam', aws_access_key_id="", aws_secret_access_key="")

"""**a. Crear un user IAM:** Recibe un `string` con el nombre del usuario. Para efectos del curso, te pediremos que por favor agregues un sufijo con tus iniciales para que no existan choques de nombre (e.g: `software_engineer_VRM`)."""

def create_user(username):
    response = iam.create_user(UserName=username)
    return response

"""Retorna la respuesta de `boto3` con el siguiente formato:

```
{
  'ResponseMetadata': {
    'RequestId': '1a1263cd-12d0-4a80-b21c-1d07c9e5f0cc',
    'HTTPStatusCode': 200,
    'HTTPHeaders': {
      'x-amzn-requestid': '1a1263cd-12d0-4a80-b21c-1d07c9e5f0cc',
      'content-type': 'text/xml',
      'content-length': '200',
      'date': 'Wed, 12 May 2021 03:23:42 GMT'
    },
    'RetryAttempts': 0
  }
}
```

**b. Crear una IAM policy:** Una política de IAM es un documento que lista todas las acciones que un rol puede realizar y los recursos a los cuales estas afectan. Este método recibe dos argumentos: `policy` es el `json` que define la política; y `policy_name` es un `string` con el nombre de esta. Al igual que en el paso anterior, te pediremos que favor agregues un sufijo con tus iniciales al nombre de la *policy* para que no exista un choque de nombres.
"""

def create_iam_policy(policy, policy_name):
    response = iam.create_policy(
        PolicyName=policy_name,
        PolicyDocument=json.dumps(policy)
    )
    return response

"""Este método retorna una respuesta de `boto3` con el siguiente formato:

```
{
  'Policy': {
    'PolicyName': 'test',
    'PolicyId': 'ANPA2V2OH2EKLIGCTLU73',
    'Arn': 'arn:aws:iam::xxxx:policy/test',
    'Path': '/',
    'DefaultVersionId': 'v1',
    'AttachmentCount': 0,
    'PermissionsBoundaryUsageCount': 0,
    'IsAttachable': True,
    'CreateDate': datetime.datetime(2021, 5, 12, 3, 33, 20, tzinfo=tzutc()),
    'UpdateDate': datetime.datetime(2021, 5, 12, 3, 33, 20, tzinfo=tzutc())
  },
  'ResponseMetadata': {
    'RequestId': 'bb9d38e5-8663-4056-b946-d51bd10f65ff',
    'HTTPStatusCode': 200,
    'HTTPHeaders': {
      'x-amzn-requestid': 'bb9d38e5-8663-4056-b946-d51bd10f65ff',
      'content-type': 'text/xml',
      'content-length': '767',
      'date': 'Wed, 12 May 2021 03:33:20 GMT'
    },
    'RetryAttempts': 0
  }
}
```

Un ejemplo de política y el formato que esta debe seguir es el siguiente:
"""

senior_manager_policy = {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:PutObject",
                ],
                "Resource": "arn:aws:s3:::nombre-bucket",
            }
        ]
    }

diccionario_policy_1 = {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:PutObject",
                ],
                "Resource": "arn:aws:s3:::nombre-bucket",
            }
        ]
    }

create_iam_policy(diccionario_policy_1, 'policy-x')

senior_manager_policy = {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:PutObject",
                ],
                "Resource": "arn:aws:s3:::operaciones-files",
            }
        ]
    }

"""Para efectos de esta actividad, los nombres de los buckets son los siguientes, estos son los que debes agregar al campo `Resource` respectivo, en vez de `*`, que daría permisos a todos los que existen asociados a la cuenta. Correr esta celda también te ayudará a testear tu código al final."""

SOFTWARE_ENGINEER_BUCKET_NAME = 'software-engineer-files'
FOOD_SCIENCE_BUCKET_NAME = 'food-science-files'
COMMERCIAL_BUCKET_NAME = 'commercial-files'
OPERATIONS_BUCKET_NAME = 'operaciones-files'

"""**c. Listar roles IAM:** Este método permite listar todos los usuarios que han sido creados."""

def list_iam_roles():
    roles = iam.list_roles()
    Role_list = roles['Roles']
    for key in Role_list:
        print(f'Nombre rol: {key["RoleName"]}, ARN: {key["Arn"]}')

"""**d. Asignar una política a un rol IAM:** Este método permite asignar las políticas que creaste a un rol que también hayas creado. Por lo tanto, le puedes dar permisos a los usuarios que lo posean para acceder a los recursos que la política describe. Recibe dos argumentos: el primero, `policy_arn`, es un `string` correspondiente al *Amazon Resource Name* de la política creada, la que es parte de la respuesta entregada por el método anterior (por lo que debes revisarla para poder ejecutar esta función). El `iam_role_name` es el `string` del nombre del rol que creaste al que le asociarás la política mencionada."""

def attach_user_policy(policy_arn, iam_role_name):
    response = iam.attach_user_policy(
        UserName=iam_role_name,
        PolicyArn=policy_arn
    )
    return response

"""El *output* de este método sigue el siguiente formato:

```
{
  'ResponseMetadata': {
    'RequestId': 'd755523a-3871-418d-b858-05fc52480247',
    'HTTPStatusCode': 200,
    'HTTPHeaders': {
      'x-amzn-requestid': 'd755523a-3871-418d-b858-05fc52480247',
      'content-type': 'text/xml',
      'content-length': '212',
      'date': 'Wed, 12 May 2021 03:44:06 GMT'
    },
    'RetryAttempts': 0
  }
}
```

**d. Desasociar políticas y eliminar roles:** Finalmente, deberás eliminar los roles que creaste, esto sin antes desasociar las políticas que hayas creado para ellos. Para desasociar una política, deberás entregar el nombre del rol con el argumento `iam_role_name` y el ARN de la política mencionado en el apartado anterior.
"""

def detach_user_policy(iam_role_name, policy_arn):
    attached_policy = iam.Policy(policy_arn)
    response = attached_policy.detach_user(
        UserName=iam_role_name
    )
    return response

"""Este método retornará una respuesta con el siguiente formato:

```
{
  'ResponseMetadata': {
    'RequestId': 'b15a3c08-64e2-4b65-9290-467c8dedc1c4',
    'HTTPStatusCode': 200,
    'HTTPHeaders': {
      'x-amzn-requestid': 'b15a3c08-64e2-4b65-9290-467c8dedc1c4',
      'content-type': 'text/xml',
      'content-length': '212',
      'date': 'Wed, 12 May 2021 22:06:56 GMT'
    },
    'RetryAttempts': 0
  }
}
```

Luego, para eliminar roles, deberás entregar el `iam_role_name` relacionado a este.
"""

def delete_user(iam_role_name):
    response = iam.delete_user(
        UserName=iam_role_name
    )
    return response

"""El *output* seguirá el siguiente formato:

```
{
  'ResponseMetadata': {
    'RequestId': 'ce895b88-ad43-47ed-82ac-4fb25acb3616',
    'HTTPStatusCode': 200,
    'HTTPHeaders': {
      'x-amzn-requestid': 'ce895b88-ad43-47ed-82ac-4fb25acb3616',
      'content-type': 'text/xml',
      'content-length': '200',
      'date': 'Wed, 12 May 2021 22:10:50 GMT'
    },
    'RetryAttempts': 0
  }
}
```

## DESARROLLO

### PASO 1 - Crear roles, políticas y asociarlas.

Con el código anterior, deberás crear los roles y políticas necesarias para acceder a los siguientes recursos:

*  **"Funcionalidades a implementar.pdf":** Documento que detalla todas las *features* a implementar para un proyecto de Inteligencia Artificial de *Yes Industry*.
*  **"Dataset de entrenamiento para Leonardo.pdf":** Archivo de datos ordenados para alimentar el algoritmo más famoso de *Yes Industry*.
*  **"Planilla de sueldos.pdf":** Documento que detalla los salarios de cada uno de los empleados de la empresa.
*  **"Lista de proveedores.pdf":** Documento que detalla todos los datos de cada uno de los proveedores de la empresa.

En la siguiente sección, encontrarás una celda ejecutable que te permitirá *testear* tu código para ver si tu modelación del problema fue correcta y puedes efectivamente acceder a los recursos que fueron pensados para cada área de *YesIndustry*.
"""

# Crear roles

# Crear políticas

# Asociar políticas

# Listar roles

"""### PASO 2 - Testea tu código

A continuación, se te entregan 2 funciones para probar tu código. La primera es `get_credentials`, la que permite obtener tus credenciales de acceso a una sesión dada una cuenta y rol. Esta función es usada de manera interna por `print_documents_from_bucket`, la que imprime el nombre de los archivos a los que un determinado rol tiene acceso dentro de un *bucket*.

La idea es que compares el resultado que imprime cada ejecución de la función con el esperado para cada área. Los archivos a ser asociados a cada área son los siguientes:

*  **Ingeniería de Software:** "Funcionalidades a implementar.pdf"
*  **Ciencia de los alimentos:** "Dataset de entrenamiento para Leonardo.csv"
*  **Comercial:** "Planilla de sueldos.pdf"
*  **Operaciones:** "Lista de proveedores.pdf"

En la siguiente celda deberás rellenar los valores según lo siguiente:

* `role_name`: Es el nombre del rol que creaste.
"""

def get_credentials(role_name):
    access_key = iam.create_access_key(UserName=role_name)
    return {'AccessKeyId': access_key["AccessKey"]["AccessKeyId"], 'SecretAccessKey': access_key["AccessKey"]["SecretAccessKey"]}

from boto3.session import Session

def print_documents_from_bucket(role_name, bucket_name):
  credentials = get_credentials(role_name)
  print(credentials)
  # Usamos las credenciales para iniciar sesión
  session = Session(
      aws_access_key_id=credentials['AccessKeyId'],
      aws_secret_access_key=credentials['SecretAccessKey']
  )
  s3 = session.resource('s3')

  # Imprimimos el nombre de los archivos existentes en el bucket para el rol especificado
  for obj in s3.Bucket(bucket_name).objects.all():
    filename = obj.key.split('/')[-1]
    print(filename)

# Completa las siguientes variables con tu información
SOFTWARE_ENGINEER_IAM_ROLE = '' ## Nombre del rol que creaste para el Software Engineer
FOOD_SCIENCE_IAM_ROLE = '' ## Nombre del rol que creaste para el área de Ciencias de Alimentos
COMMERCIAL_IAM_ROLE = '' ## Nombre del rol que creaste para el área comercial
OPERATIONS_IAM_ROLE = '' ## Nombre del rol que creaste para el área de operaciones

# Documentos asociados al área de Ingeniería de Software
# Debería imprimir "Funcionalidades a implementar.pdf"
print_documents_from_bucket(SOFTWARE_ENGINEER_IAM_ROLE, SOFTWARE_ENGINEER_BUCKET_NAME)

# Documentos asociados al área de Ciencia de los alimentos
# Debería imprimir "Dataset de entrenamiento para Leonardo.pdf"
print_documents_from_bucket(FOOD_SCIENCE_IAM_ROLE, FOOD_SCIENCE_BUCKET_NAME)

# Documentos asociados al área de Comercial
# Debería imprimir "Planilla de sueldos.pdf"
print_documents_from_bucket(COMMERCIAL_IAM_ROLE, COMMERCIAL_BUCKET_NAME)

# Documentos asociados al área de Operaciones
# Debería imprimir "Lista de proveedores.pdf"
print_documents_from_bucket(OPERATIONS_IAM_ROLE, OPERATIONS_BUCKET_NAME)

"""### Anexos: Subir archivos y crear *buckets*

https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-uploading-files.html

https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-example-creating-buckets.html

https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html#using-with-s3-actions-related-to-buckets

### Anexos: Dar permisos a partir de etiquetas

https://general-immersionday-tmp.workshop.aws/en/iam/iam.html

"""
